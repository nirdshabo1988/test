env: {{ .Values | get "env" "dev"}} # Should be one of: dev, prod
namespace: {{ .Values | get "namespace" "default" }}

imagePullSecrets: 
  - name: oligoregcred
  - name: regcred
  - name: ecr-cred-eu-central-1

imageTags:
  authProxy: &authProxyImageTag ""
  backendApi: &backendApiImageTag ""
  docs: &docsImageTag ""
  etl: &etlImageTag ""
  frontend: &frontendImageTag ""
  identity: &identityImageTag ""
  issuesService: &issuesServiceImageTag ""

dns:
  domain: {{ .Values | get "domain" "cluster.local" }}

postgres:
  hostMaster: "postgresql.{{.Values | get "namespace" "default" }}.svc.{{.Values | get "dnsDomain" "cluster.local"}}"
  hostSlave: ""
  port: "5432"


kafka:
  cloudApiKey:
    key: ""
    secret: ""
  brokers: ""
  clusterID: ""

redis:
  host: "redis-cluster.{{ .Values | get "namespace" "default"}}.svc.{{ .Values | get "dnsDomain"}}"
  port: {{ .Values | get "redisPort" "6379" }}
  useTLS: {{ .Values | get "redisUseTLS" false }}

coralogix:
  apiKey: {{ .Values | get "coralogix.apiKey" }}
  applicationName: "Oligo-{{requiredEnv "USER"}}-dev"

backendApi:
  enabled: {{ .Values | get "platform.backendApi.enabled" false}}
  image:
    repository: {{.Values | get "imageRegistry"}}/{{.Values | get "platform.backendApi.imageName" "backend-api"}}
    tag: {{.Values | get "platform.backendApi.imageTag" "latest"}}
    pullPolicy: {{.Values | get "pullPolicy" "IfNotPresent"}}

  replicaCount: 1
  resources: {}

  logLevel: "warn"
  port: 8080
  swaggerUi: "true"
  db:
    database: {{.Values | get "postgresDatabase" "oligo_platform_db"}}
    username: {{.Values | get "postgresUsername" "postgres" }}
    password: {{.Values | get "postgresPassword" "postgres" }}
    readFromReplicaDb: {{.Values | get "postgresReadFromReplicaDb" false }}

backendIdentity:
  enabled: {{ .Values | get "platform.backendIdentity.enabled" false}}
  image:
    repository: {{.Values | get "imageRegistry"}}/{{ .Values | get "platform.backendIdentity.imageName" "identity-service"}}
    tag: {{ .Values | get "platform.backendIdentity.imageTag" "latest" }}
    pullPolicy: {{.Values | get "pullPolicy" "IfNotPresent"}}

  replicaCount: 1
  resources: {}
  logLevel: "warn"
  port: 8080
  swaggerUi: "true"
  encryptionKey: ""
  slackAppSecret: ""
  db:
    database: {{.Values | get "backendIdentity.database" "identity" }}
    username: {{.Values | get "postgresUsername" "postgres" }}
    password: {{.Values | get "postgresPassword" "postgres" }}

frontend:
  enabled: {{ .Values | get "platform.frontend.enabled" false}}
  image:
    repository: ol{{.Values | get "imageRegistry"}}/{{ .Values | get "platform.frontend.imageName" "frontend"}}
    tag: {{ .Values | get "platform.frontend.imageTag" "latest"}}
    pullPolicy: {{.Values | get "pullPolicy" "IfNotPresent"}}
  replicaCount: 1
  resources: {}
  port: 8080

jobs:
  riskCalculator:
    enabled: {{.Values | get "platform.jobs.riskCalculator.enabled" false}}
    image:
      repository: {{.Values | get "imageRegistry"}}/{{.Values | get "platform.backendApi.imageName" "backend-api"}}
      tag: {{.Values | get "platform.backendApi.imageTag" "latest"}}
      pullPolicy: {{.Values | get "pullPolicy" "IfNotPresent"}}

    resources: {}

    logLevel: "warn"
    schedule: "'*/10 * * * *'"
    batch: 100
    nvdApiKey: ""
    failHistoryLimit: 3
    successHistoryLimit: 3
    db:
      database: {{.Values | get "postgresDatabase" "oligo_platform_db"}}
      username: {{.Values | get "postgresUsername" "postgres" }}
      password: {{.Values | get "postgresPassword" "postgres" }}
    kafka:
      accessKey: ""
      secretKey: ""

  vulnerabilitySummarizer:
    enabled: {{.Values | get "platform.jobs.vulnerabilitySummarizer.enabled" false}}
    image:
      repository: {{.Values | get "imageRegistry"}}/{{.Values | get "platform.backendApi.imageName" "backend-api"}}
      tag: {{.Values | get "platform.backendApi.imageTag" "latest"}}
      pullPolicy: {{.Values | get "pullPolicy" "IfNotPresent"}}

    resources: {}
    failHistoryLimit: 3
    successHistoryLimit: 3
    logLevel: "warn"
    schedule: "0 0 * * *"
    db:
      database: {{.Values | get "postgresDatabase" "oligo_platform_db"}}
      username: {{.Values | get "postgresUsername" "postgres" }}
      password: {{.Values | get "postgresPassword" "postgres" }}

  issueNotifier:
    enabled: {{.Values | get "platform.jobs.issueNotifier.enabled" false}}
    image:
      repository: {{.Values | get "imageRegistry"}}/{{.Values | get "platform.backendApi.imageName" "backend-api"}}
      tag: {{.Values | get "platform.backendApi.imageTag" "latest"}}
      pullPolicy: {{.Values | get "pullPolicy" "IfNotPresent"}}

    resources: {}

    logLevel: "warn"
    schedule: "'*/10 * * * *'"
    failHistoryLimit: 3
    successHistoryLimit: 3
    db:
      database: {{.Values | get "postgresDatabase" "oligo_platform_db"}}
      username: {{.Values | get "postgresUsername" "postgres" }}
      password: {{.Values | get "postgresPassword" "postgres" }}

  clearLibraryTemporaryExecution:
    enabled: {{.Values | get "platform.jobs.clearLibraryTemporaryExecution.enabled" false}}
    image:
      repository: {{.Values | get "imageRegistry"}}/{{.Values | get "platform.backendApi.imageName" "backend-api"}}
      tag: {{.Values | get "platform.backendApi.imageTag" "latest"}}
      pullPolicy: {{.Values | get "pullPolicy" "IfNotPresent"}}

    resources: {}

    logLevel: "debug"
    schedule: "'*/10 * * * *'"
    failHistoryLimit: 3
    successHistoryLimit: 3
    db:
      database: "oligo_platform_db"
      username: ""
      password: ""

issuesService:
  enabled: {{.Values | get "platform.issuesService.enabled" false}}
  image:
    repository: {{.Values | get "imageRegistry"}}/{{.Values | get "platform.issuesService.imageName" "issues-service"}}
    tag: {{.Values | get "platform.issuesService.imageName" "latest"}}
    pullPolicy: {{.Values | get "pullPolicy" "IfNotPresent"}}

  replicaCount: 1
  resources: {}

  logLevel: "warn"
  port: 8080
  swaggerUi: "true"
  db:
    database: {{.Values | get "postgresDatabase" "oligo_platform_db"}}
    username: {{.Values | get "postgresUsername" "postgres" }}
    password: {{.Values | get "postgresPassword" "postgres" }}
  kafka:
    accessKey: ""
    secretKey: ""

keycloak:
  enabled: {{ .Values | get "platform.keycloak.enabled" false}}
  image:
    repository: {{.Values | get "imageRegistry"}}/{{.Values | get "platform.keycloak.imageName" "keycloak"}}
    tag: {{.Values | get "platform.keycloak.imageTag" "latest"}}
    pullPolicy: {{.Values | get "pullPolicy" "IfNotPresent"}}

  replicaCount: 1
  resources: {}

  httpPort: 8080
  httpsPort: 8443
  db:
    databaseType: "postgres"
    database: {{.Values | get "keycloak.database" "keycloak" }}
    username: {{.Values | get "postgresUsername" "postgres" }}
    password: {{.Values | get "postgresPassword" "postgres" }}
  admin:
    username: "admin@oligo.io"
    password: "admin"

etl:
  image:
    repository: {{.Values | get "imageRegistry"}}/{{.Values | get "platform.etl.imageName" "etl"}}
    tag: {{.Values | get "platform.etl.imageTag" "latest"}}
    pullPolicy: {{.Values | get "pullPolicy" "IfNotPresent"}}

  db:
    database: {{.Values | get "postgresDatabase" "oligo_platform_db"}}
    username: {{.Values | get "postgresUsername" "postgres" }}
    password: {{.Values | get "postgresPassword" "postgres" }}
    readFromReplicaDb: false
  kafka:
    accessKey: ""
    secretKey: ""

  redis:
    username: "default"
    password: {{.Values | get "redisPassword" "redis"}}

  metricsPort: 9090
  consumerGroupPrefix: "" # This should be used only for local testing against shared Kafka clusters.

  p1:
    enabled: {{ .Values | get "platform.etl.p1.enabled" false}}
    logLevel: "info"
    replicaCount: 1
    resources: {}
  p2:
    enabled: {{ .Values | get "platform.etl.p2.enabled" false}}
    logLevel: "info"
    replicaCount: 1
    resources: {}

authProxy:
  enabled: {{ .Values | get "platform.authProxy.enabled" false}}
  image:
    repository: {{.Values | get "imageRegistry" "oligo"}}/{{ .Values | get "platform.authProxy.imageName" "auth-proxy"}}
    pullPolicy: {{ .Values | get "pullPolicy" "IfNotPresent" }}
    tag: {{ .Values | get "platform.authProxy.imageTag" "latest"}}
  replicaCount: 1
  resources:
    requests:
      memory: 90Mi
    limits:
      memory: 150Mi

  logLevel: "warn"
  port: 8080

docs:
  enabled: {{ .Values | get "platform.docs.enabled" false}}
  # namespace: docs 
  image:
    repository: {{.Values | get "imageRegistry" "oligo"}}/{{ .Values | get "platform.docs.imageName" "docs"}} 
    pullPolicy: {{ .Values | get "pullPolicy" "IfNotPresent" }}
    tag: {{ .Values | get "platform.docs.imageTag" "latest"}} 
  replicaCount: 1
  resources: {}
  logLevel: "warn"
  port: 8080

cert-manager:
  enabled: {{ .Values | get "platform.certManager.enabled" false}}
  installCRDs: true
  clusterIssuer:
    email: {{ .Values | get "platform.certManager.email" "oren@oligosecurity.io"}}  # TODO: Change to Oligo email
    server: "https://acme-v02.api.letsencrypt.org/directory"
    region: "eu-central-1"
